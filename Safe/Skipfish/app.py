from ast import Num
import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
import pandas as pd
import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
import subprocess
import zipfile
from io import BytesIO
from flask import send_file,send_from_directory
from sqlalchemy import true
import os
from io import BytesIO
import time
import random
app = Flask(__name__)


@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html')







@app.route('/skipfish_scan',methods = ['POST'])

def skipfish_scan():
    
    def skipfish(url,time):
        global num
        num = random.randint(1,100)
        cmd = f'skipfish -k {time} -o ./sf_test_{num} {url}'
        print('started')
        #cmd = './while.sh'
        stream = subprocess.run(cmd, shell=True, executable='/bin/bash', stdout=subprocess.PIPE , input='enter\n', text=True)#, stderr=subprocess.PIPE, stdin=subprocess.PIPE , text=True  , check=True)
        #print(stream.stdout.decode())

        # stream.stdin.write('Enter')
        # #stream.stdin.write('Press')
        # stream.stdin.close()
        print('done')
    timer = request.form['time']   
    url = request.form['url']
    skipfish(url,timer)
    return render_template("index.html",prediction_text='Done')


   
@app.route('/zipped_data',methods = ['GET','POST'])
def zipped_data():
    timestr = time.strftime("%Y%m%d-%H%M%S")
    fileName = f"Skipfish_Report_{num}.zip"
    memory_file = BytesIO()
    file_path = f'./sf_test_{num}/'
    with zipfile.ZipFile(memory_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
          for root, dirs, files in os.walk(file_path):
                    for file in files:
                              zipf.write(os.path.join(root, file))
    memory_file.seek(0)
    return send_file(memory_file,
                     attachment_filename=fileName,
                     as_attachment=True)

  
 

if __name__ == "__main__":
    app.debug = True
    app.run()